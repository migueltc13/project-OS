/*! @mainpage Task Orchestrator Service
 *
 * @section intro_sec Introduction
 * This task orchestrator service is implemented in C within the Operating Systems environment for the 2023/2024 academic year.
 *
 *   - [Description and Requirements](../../project.pdf)
 *   - [Report](../../report/report.pdf)
 *
 * It is a service that allows the asynchronous execution of tasks, composed of two main components:
 *   - **Server**: Responsible for managing the tasks execution or scheduling and transmitting messages to clients.
 *   - **Client**: Has the ability to execute tasks and check their status.
 *
 * @section sched_policies Scheduling Policies
 * The service supports the following scheduling policies:
 *   - **FCFS**: First Come First Served
 *   - **SJF**: Shortest Job First
 *   - **PES**: Priority Escalation Scheduling
 *
 * @section compile_sec Compilation
 * To compile the project, run the following command:
 * \code{.sh}
 * make
 * \endcode
 * The `orchestrator` and `client` executables will be generated in the `bin` directory.
 *
 * @section usage_sec Usage
 *
 * @subsection orchestrator_usage Orchestrator Server Usage
 * \verbatim
Usage: bin/orchestrator <output_dir> <parallel_tasks> [sched_policy]

Options:
    <output_dir>      Directory to store task output and history files
    <parallel_tasks>  Maximum number of tasks running in parallel
    [sched_policy]    Scheduling policy (FCFS, SJF, PES) default: SJF
\endverbatim
 *
 * @subsection client_usage Client Usage
 *
 * \verbatim
Usage: bin/client <option [args]>

Options:
    execute <est_time|priority> <-u|-p> "<command [args]>"  Execute a command
        est_time  Estimated time of execution, in case scheduling policy is SJF
        priority  Priority of the task, in case scheduling policy is PES
        -u        Unpiped command
        -p        Piped command
        command   Command to execute. Maximum size: 300 bytes
    status                                                  Status of the tasks
    kill                                                    Terminate the server

Note: The estimated time or priority is irrelevant if the scheduling policy is
    FCFS, but it must be provided as an argument.
\endverbatim
 *
 * @subsubsection exec_task Execute Task
 *
 * \verbatim
bin/client execute <est_time|priority> <-u|-p> "<command [args]>"
\endverbatim
 *
 * @subsubsection check_status Check Tasks Status
 *
 * \verbatim
bin/client status
\endverbatim
 *
 * This command will display all the executing, scheduled, and completed tasks.
 * For completed tasks the elapsed time is also displayed.
 *
 * @subsubsection kill_server Kill Orchestrator Server
 *
 * \verbatim
bin/client kill
\endverbatim
 *
 * This command will send a request to the orchestrator server to shutdown.
 *
 * This terminates all the scheduled tasks and the server itself.
 *
 * Executing tasks will still be able to finish, and the respective files will be saved in the output directory, as usual.
 *
 * @section files_sec Output Files
 * The output directory has the given structure:
 * \verbatim
<output_dir>
 ├── history
 ├── task_number
 ├── task1
 │   ├── out
 │   ├── err
 │   └── time
 ├── task2
 │   ├── out
 │   ├── err
 │   └── time
 │
...
 │
 └── taskN
     ├── out
     ├── err
     └── time
\endverbatim
 *
 * @section test_sec Testing
 * You can find a selection of test cases in the `tests` directory.
 *
 * This tests require the `orchestrator` to be running.
 *
 * Run then from the project root directory, so the scripts can find the client executable.
 *
 * @section authors_sec Authors
 * - Flávia Araújo - [@flaviaraujo](https://github.com/flaviaraujo)
 * - Miguel Carvalho - [@migueltc13](https://github.com/migueltc13)
 */
